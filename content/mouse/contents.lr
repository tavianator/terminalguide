_model: page
---
title: Mouse
---
body:

#### markdown ####
body:

Mouse tracking modes enable the application to react to mouse input.

Configuration is for 2 independent aspects:
* What events are sent and their button encoding.
* Which report encoding is used

Additionally there are some special modes.

Events
-----------
These modes are mutually exclusive. The last activated mode wins.

<table class='visible-table'>
<tr><td>{{mode_link('p9')}}</td><td>Send mouse button press.<br>Button encoding <code>btn</code> does not contain bits for modifiers etc, but is the button number without moved bits. Only left, middle and right mouse buttons are reported</td></tr>
<tr><td>{{mode_link('p1000')}}</td><td>Send mouse button press and release.<br>Also send scroll wheel events.</td></tr>
<tr><td>{{mode_link('p1001')}}</td><td>Like {{mode_link('p1000')}}, but shows a text selection. <br><b>Needs a cooperating application to avoid rendering the terminal non operative</b></td></tr>
<tr><td>{{mode_link('p1002')}}</td><td>Send mouse button press and release. Send mouse move events while a button is pressed.<br>Also send scroll wheel events.</td></tr>
<tr><td>{{mode_link('p1003')}}</td><td>Send mouse button press and release. Always send mouse move events.<br>Also send scroll wheel events.</td></tr>
</table>

&nbsp;

Reporting format
-------------------------

<table class='visible-table'>
<tr><td>default</td><td>Mouse information is reported as<br>
{{seq('\033[M')}}{{seq_param('btn', 'Ⓒ')}}{{seq_param('column', 'Ⓒ')}}{{seq_param('row', 'Ⓒ')}}<br>
with <code>btn</code>, <code>column</code> and <code>row</code> encoded as bytes with code 32 + value. This mode has a range from 1 to 223. If the value exceeds the range a {{seq('\0')}} is used as out of range marker. These are not encoded in utf-8 but output as raw bytes. There is no separator between the bytes.<br>(TODO: sometimes starts with {{seq('\033>M')}})</td></tr>
<tr><td>{{mode_link('p1005')}}</td><td>Mouse information is reported as<br>
{{seq('\033[M')}}{{seq_param('btn', 'Ⓒ')}}{{seq_param('column', 'Ⓒ')}}{{seq_param('row', 'Ⓒ')}}<br>
with <code>btn</code>, <code>column</code> and <code>row</code> encoded as variable length byte sequences. For values < 96 the format is identical to the default mode. Values above that boundary are encoded as 2 bytes as if encoding codepoint value + 32 as utf-8. This mode has a range from 1 to 2015. If the value exceeds the range a {{seq('\0')}} is used as out of range marker. The output is decodable with a standard utf-8 decoder. There is no separator between the bytes.<br>(TODO: sometimes starts with {{seq('\033>M')}})</td></tr>
<tr><td>{{mode_link('p1006')}}</td><td>Mouse information is reported as<br>
{{seq('\033[<')}}{{seq_param('btn')}}{{seq(';')}}{{seq_param('column')}}{{seq(';')}}{{seq_param('row')}}{{seq('M')}} for button press or movement, and<br>
{{seq('\033[<')}}{{seq_param('btn')}}{{seq(';')}}{{seq_param('column')}}{{seq(';')}}{{seq_param('row')}}{{seq('m')}} for button release<br>
with <code>btn</code>, <code>column</code> and <code>row</code> encoded as variable length digit sequences in base 10. This mode does not have an arbitrary range limit. The output is decodable with a standard utf-8 decoder, because it only contains ascii characters.</td></tr>
<tr><td>{{mode_link('p1015')}}</td><td>Mouse information is reported as<br>
{{seq('\033[')}}{{seq_param('btn')}}{{seq(';')}}{{seq_param('column')}}{{seq(';')}}{{seq_param('row')}}{{seq('M')}}<br>
with <code>btn</code>, <code>column</code> and <code>row</code> encoded as variable length digit sequences in base 10. For `btn` the encoded value is offset by the value 32(i.e. the right button is encoded as {{seq('34')}}). This mode does not have an arbitrary range limit. The output is decodable with a standard utf-8 decoder, because it only contains ascii characters.</td></tr>
</table>

Mouse button ids:
<table class='visible-table'>
<tr><td>left</td><td>0</td></tr>
<tr><td>middle</td><td>1</td></tr>
<tr><td>right</td><td>2</td></tr>
<tr><td>some button was released</td><td>3</td></tr>
<tr><td>wheel up</td><td>4</td></tr>
<tr><td>wheel down</td><td>5</td></tr>
<tr><td>wheel left</td><td>6 (only xterm since version 338)</td></tr>
<tr><td>wheel right</td><td>7 (only xterm since version 338)</td></tr>
<tr><td>additional buttons</td><td>see below (only xterm since version 341)</td></tr>
</table>

The mouse button number `mousebtn` has valid ids of 0 to 2 and 4 to 15.
In all modes except for {{mode_link('p9')}} `mousebtn` is encoded by using the two lower bits of `mousebtn` as is and translating the next bits to 64 and 128.
<table class='visible-table'>
<tr><th>bit value in <code>mousebtn</code></th><th>encoded value in <code>btn</code></th></tr>
<tr><td>1</td><td>1</td></tr>
<tr><td>2</td><td>2</td></tr>
<tr><td>4</td><td>64</td></tr>
<tr><td>8</td><td>128</td></tr>
</table>

Buttons 12 to 15 are only available when using {{mode_link('p1006')}} or {{mode_link('p1015')}}.

The `btn` parameter also contains additional information encoded as special bits (not used in {{mode_link('p9')}}):
<table class='visible-table'>
<tr><td>mouse move</td><td>32</td></tr>
<tr><td>shift</td><td>4</td></tr>
<tr><td>alt</td><td>8</td></tr>
<tr><td>ctrl</td><td>16</td></tr>
</table>

`column`  and `row` always are coordinates of a cell in the terminal (never < 1 and never bigger than the size in their dimension of the terminal)

### Reporting buttons (unless in {{mode_link('p1006')}})

When a button is pressed its id is used in the report. When a button is released the generic id '3' is used, it is impossible to deduce which button was released.

When multiple buttons are held down while moving the mouse the report contains the held button with the lowest id.

When no buttons are held down while moving the mouse the reported button id is 3 (button released).

### Reporting buttons  in {{mode_link('p1006')}}

When a button is pressed it's id is used in the report with a final character {{seq('M')}}. When a button is released the same id is used but with a final character {{seq('m')}}. By using different final characters the application can track which buttons are held down even after multiple buttons where held at the same time.

When multiple buttons are held down while moving the mouse the report contains the held button with the lowest id.

When no buttons are held down while moving the mouse the reported button id is 3 (button released).

Highlight tracking
---------------------------
{{mode_link('p1001')}} is a special case.

For left button clicks the terminal will render a text selection highlight starting at an application specified point and restricted to an application specified range of lines. After ending the selection it's not automatically transferred to the clipboard. After release of the mouse button the highlighting is automatically removed.

For other mouse button clicks the reporting is as in mode {{mode_link('p1000')}}.

**Protocol Details**

When the user presses the left mouse button the terminal sends a mouse down according to the currently selected encoding. Next it waits for the application to reply with further instructions using  {{seq_link('csi_ct_5param')}}. The only known implementation (xterm) freezes until it receives an answer (no repaint handling, no input processing). If the application replies with an abort mouse tracking sequence the terminal proceeds like in mode {{mode_link('p1000')}}.

Otherwise the terminal has received a start position and a line range from the application. On following mouse moves by the user it paints a selection from that start position to the position of the mouse pointer. The selection is clamped to the given range of lines (all columns are allowed). When the user releases the mouse button the terminal reports the end position of the selection using the currently selected encoding but replacing the `M` sequence identifier by `T` or 't'.

If the user did not move the mouse pointer the reply uses `t` and contains two parameters which are the same position (reported as row and column) as the mouse down event. If the selection is empty the terminal does not reply at all. If the selection only contains one character it replies with `t` and the position following the start position. If the mouse was moved otherwise the reply uses ´T` and has 6 parameters: startx, starty, endx, endy, mousex and mousey. The start and end parameters contain the selected range (between the start position given by the application and the clamped mouse position) normalized so start is before end. start is inclusive and end is exclusive. If the last line in the range is fully selected the reported position will be the first column on the first unreachable line. The mouse parameters contain the un-clamped mouse pointer position.
